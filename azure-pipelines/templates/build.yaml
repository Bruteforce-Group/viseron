parameters:
  - name: architectures
    type: object
    default:
      - aarch64
      - amd64
      - amd64-cuda
      - jetson-nano
      - rpi3
  - name: namespace
    type: string
    default: roflcoopter
  - name: images
    type: object
    default: []
  - name: imageNameOnly
    type: boolean
    default: false
  - name: crossBuild
    type: boolean
    default: true
  - name: timeoutJob
    type: number
    default: 360
  - name: release
    type: boolean
    default: false

jobs:
  - job: Build
    timeoutInMinutes: ${{ parameters.timeoutJob }}
    strategy:
      matrix:
        ${{ each architecture in parameters.architectures }}:
          ${{ architecture }}:
            arch: ${{ architecture }}
    pool:
      vmImage: "ubuntu-latest"
    steps:
      # - script: |
      #     cd $(Agent.BuildDirectory)/s/azure-pipelines
      #     set -a
      #     source .env
      #     set +a
      #   displayName: Read env vars from file
      - task: Docker@2
        displayName: Login to Docker Hub
        inputs:
          command: login
          containerRegistry: "Docker Hub"

      - script: docker run --rm --privileged tonistiigi/binfmt --install all
        displayName: Register QEMU for cross-builds
        condition: and(succeeded(), eq('${{ parameters.crossBuild }}', true))

      - ${{ each image in parameters.images }}:
          - script: |
              cd $(Agent.BuildDirectory)/s/docker
              docker-compose --file ../azure-pipelines/docker-compose-build.yaml --env-file ../azure-pipelines/.env pull $(arch)-${{ image }}
            displayName: Pull $(arch)-${{ image }} for Docker layer caching
            continueOnError: true

          - script: |
              cd $(Agent.BuildDirectory)/s/docker
              docker-compose --file ../azure-pipelines/docker-compose-build.yaml --env-file ../azure-pipelines/.env build --build-arg BUILDKIT_INLINE_CACHE=1 $(arch)-${{ image }}
            displayName: Build $(arch)-${{ image }}
            condition: and(succeeded(), eq('${{ parameters.imageNameOnly }}', false))
            env:
              DOCKER_BUILDKIT: 1
              COMPOSE_DOCKER_CLI_BUILD: 1
              BUILDKIT_PROGRESS: plain
          - script: |
              cd $(Agent.BuildDirectory)/s/docker
              docker-compose --file ../azure-pipelines/docker-compose-build.yaml --env-file ../azure-pipelines/.env build --build-arg BUILDKIT_INLINE_CACHE=1 ${{ image }}
            displayName: Build ${{ image }}
            condition: and(succeeded(), eq('${{ parameters.imageNameOnly }}', true))
            env:
              DOCKER_BUILDKIT: 1
              COMPOSE_DOCKER_CLI_BUILD: 1
              BUILDKIT_PROGRESS: plain

          # Runs only for non-release triggers
          - script: |
              cd $(Agent.BuildDirectory)/s/docker
              docker-compose --file ../azure-pipelines/docker-compose-build.yaml --env-file ../azure-pipelines/.env push $(arch)-${{ image }}
            displayName: Push $(arch)-${{ image }}
            condition: and(succeeded(), eq('${{ parameters.imageNameOnly }}', false), eq('${{ parameters.release }}', false))
          - script: |
              cd $(Agent.BuildDirectory)/s/docker
              docker-compose --file ../azure-pipelines/docker-compose-build.yaml --env-file ../azure-pipelines/.env push ${{ image }}
            displayName: Push ${{ image }}
            condition: and(succeeded(), eq('${{ parameters.imageNameOnly }}', true), eq('${{ parameters.release }}', false))

          # Runs only for release triggers
          - template: release_version.yaml
            parameters:
              release: ${{ parameters.release }}
          - script: |
              echo tagging roflcoopter/$(arch)-${{ image }}:$(viseronVersion)
              docker image tag roflcoopter/$(arch)-${{ image }}:dev roflcoopter/$(arch)-${{ image }}:$(viseronVersion)
              docker image push roflcoopter/$(arch)-${{ image }}:$(viseronVersion)

              if [ $(latestRelease) = true ] ; then
                echo tagging roflcoopter/$(arch)-${{ image }}:latest
                docker image tag roflcoopter/$(arch)-${{ image }}:dev roflcoopter/$(arch)-${{ image }}:latest
                docker image push roflcoopter/$(arch)-${{ image }}:latest
              fi
            displayName: Push $(arch)-${{ image }}
            condition: and(succeeded(), eq('${{ parameters.release }}', true))

      - task: Docker@2
        displayName: Logoff Docker Hub
        inputs:
          command: logout
          containerRegistry: "Docker Hub"
          condition: always()
