name: CI

on:
  push:
    branches:
      - dev
      - master
  pull_request: ~

env:
  CACHE_VERSION: 1
  DEFAULT_PYTHON: 3.8
  PRE_COMMIT_CACHE: ~/.cache/pre-commit
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  BUILDKIT_PROGRESS: plain

jobs:
  prepare-python-venv:
    name: Prepare Python venv
    runs-on: ubuntu-20.04
    outputs:
      python-venv-cache-key: ${{ steps.python-venv-cache-key.outputs.key }}
    steps:
      # Create Python virtual env used for linters
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      # Create a virtual environment and cache it
      - name: Generate Python virtual environment restore key
        id: python-venv-cache-key
        env:
          cache-name: cache-python-venv
        run: >-
          echo "key=${{ runner.os }}-${{ github.job }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('requirements_test.txt') }}" >> $GITHUB_OUTPUT
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ steps.python-venv-cache-key.outputs.key }}
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements_test.txt

  prepare-pre-commit:
    name: Prepare pre-commit
    runs-on: ubuntu-20.04
    needs: prepare-python-venv
    outputs:
      pre-commit-cache-key: ${{ steps.pre-commit-cache-key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Generate pre-commit restore key
        id: pre-commit-cache-key
        env:
          cache-name: cache-pre-commit
        run: >-
          echo "key=${{ runner.os }}-${{ github.job }}-${{ env.cache-name }}-${{ env.CACHE_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('requirements_test.txt') }}" >> $GITHUB_OUTPUT
      # Install pre-commit hooks into the cached virtual environment
      - name: Restore pre-commit hooks
        id: cache-pre-commit
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ steps.pre-commit-cache-key.outputs.key }}
      - name: Create pre-commit hooks
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          pre-commit install-hooks

  run-isort:
    name: Run isort
    runs-on: ubuntu-20.04
    needs: [prepare-python-venv, prepare-pre-commit]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-pre-commit
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ needs.prepare-pre-commit.outputs.pre-commit-cache-key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run isort
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual isort --all-files --show-diff-on-failure

  run-black:
    name: Run black
    runs-on: ubuntu-20.04
    needs: [prepare-python-venv, prepare-pre-commit]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-pre-commit
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ needs.prepare-pre-commit.outputs.pre-commit-cache-key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run black
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual black --all-files --show-diff-on-failure

  run-codespell:
    name: Run codespell
    runs-on: ubuntu-20.04
    needs: [prepare-python-venv, prepare-pre-commit]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-pre-commit
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ needs.prepare-pre-commit.outputs.pre-commit-cache-key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run codespell
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual codespell --all-files --show-diff-on-failure

  run-pylint:
    name: Run pylint
    runs-on: ubuntu-20.04
    needs: [prepare-python-venv, prepare-pre-commit]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-pre-commit
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ needs.prepare-pre-commit.outputs.pre-commit-cache-key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run pylint
        run: |
          . venv/bin/activate
          python --version
          pylint --version
          pylint viseron

  run-flake8:
    name: Run flake8
    runs-on: ubuntu-20.04
    needs: [prepare-python-venv, prepare-pre-commit]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-pre-commit
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ needs.prepare-pre-commit.outputs.pre-commit-cache-key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run flake8
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual flake8 --all-files --show-diff-on-failure

  run-pyupgrade:
    name: Run pyupgrade
    runs-on: ubuntu-20.04
    needs: [prepare-python-venv, prepare-pre-commit]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Restore pre-commit environment from cache
        id: cache-pre-commit
        uses: actions/cache@v3.0.11
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ needs.prepare-pre-commit.outputs.pre-commit-cache-key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run pyupgrade
        run: |
          . venv/bin/activate
          pre-commit run --hook-stage manual pyupgrade --all-files --show-diff-on-failure

  run-pytest:
    name: Run pytest
    runs-on: ubuntu-20.04
    needs: prepare-python-venv
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.3.0
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v3.0.11
        with:
          path: venv
          key: ${{ needs.prepare-python-venv.outputs.python-venv-cache-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: Pull current Docker dev tag
        run: |
          docker-compose --file azure-pipelines/docker-compose-build.yaml --env-file azure-pipelines/.env pull amd64-viseron
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v19
        with:
          files: |
            requirements.txt
            docker/Dockerfile.wheels
      - name: List all modified files
        run: |
          for file in "${{ steps.changed-files.outputs.all_modified_files }}"; do
            echo "$file was modified"
          done
      - name: Re-build wheels if requirements.txt or Dockerfile.wheels has changed
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          docker-compose --file azure-pipelines/docker-compose-build.yaml --env-file azure-pipelines/.env pull amd64-wheels
          docker-compose --file azure-pipelines/docker-compose-build.yaml --env-file azure-pipelines/.env build --build-arg BUILDKIT_INLINE_CACHE=1 amd64-wheels
          docker-compose --file azure-pipelines/docker-compose-build.yaml --env-file azure-pipelines/.env build --build-arg BUILDKIT_INLINE_CACHE=1 amd64-viseron
      - name: Build pytest Docker image
        run: |
          docker-compose --file azure-pipelines/docker-compose-build.yaml --env-file azure-pipelines/.env build --build-arg BUILDKIT_INLINE_CACHE=1 amd64-viseron-tests
      - name: Run pytest
        run: |
          docker-compose --file azure-pipelines/docker-compose-build.yaml --env-file azure-pipelines/.env up amd64-viseron-tests
      - name: Copy .coverage to host
        run: |
          docker cp amd64-viseron-tests:/src/coverage.xml coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.5.2
